// Code generated by protoc-gen-go. DO NOT EDIT.
// versions:
// 	protoc-gen-go v1.26.0
// 	protoc        v3.17.1
// source: flow.proto

package schema

import (
	protoreflect "google.golang.org/protobuf/reflect/protoreflect"
	protoimpl "google.golang.org/protobuf/runtime/protoimpl"
	reflect "reflect"
	sync "sync"
)

const (
	// Verify that this generated code is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(20 - protoimpl.MinVersion)
	// Verify that runtime/protoimpl is sufficiently up-to-date.
	_ = protoimpl.EnforceVersion(protoimpl.MaxVersion - 20)
)

type Flow struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	SourceIPv4Address      []byte     `protobuf:"bytes,1,opt,name=SourceIPv4Address,proto3" json:"SourceIPv4Address,omitempty"`
	DestinationIPv4Address []byte     `protobuf:"bytes,2,opt,name=DestinationIPv4Address,proto3" json:"DestinationIPv4Address,omitempty"`
	SourcePort             uint32     `protobuf:"varint,3,opt,name=SourcePort,proto3" json:"SourcePort,omitempty"`
	DestinationPort        uint32     `protobuf:"varint,4,opt,name=DestinationPort,proto3" json:"DestinationPort,omitempty"`
	Protocol               uint32     `protobuf:"varint,5,opt,name=Protocol,proto3" json:"Protocol,omitempty"`
	FlowStartMilliseconds  uint64     `protobuf:"varint,6,opt,name=FlowStartMilliseconds,proto3" json:"FlowStartMilliseconds,omitempty"`
	FlowEndMilliseconds    uint64     `protobuf:"varint,7,opt,name=FlowEndMilliseconds,proto3" json:"FlowEndMilliseconds,omitempty"`
	FlowOctetCount         uint64     `protobuf:"varint,8,opt,name=FlowOctetCount,proto3" json:"FlowOctetCount,omitempty"`
	FlowPacketCount        uint64     `protobuf:"varint,9,opt,name=FlowPacketCount,proto3" json:"FlowPacketCount,omitempty"`
	ReverseFlowOctetCount  uint64     `protobuf:"varint,10,opt,name=ReverseFlowOctetCount,proto3" json:"ReverseFlowOctetCount,omitempty"`
	ReverseFlowPacketCount uint64     `protobuf:"varint,11,opt,name=ReverseFlowPacketCount,proto3" json:"ReverseFlowPacketCount,omitempty"`
	SourceGeoIPData        *GeoIPData `protobuf:"bytes,12,opt,name=SourceGeoIPData,proto3" json:"SourceGeoIPData,omitempty"`
	DestinationGeoIPData   *GeoIPData `protobuf:"bytes,13,opt,name=DestinationGeoIPData,proto3" json:"DestinationGeoIPData,omitempty"`
	SourceDomainName       string     `protobuf:"bytes,14,opt,name=SourceDomainName,proto3" json:"SourceDomainName,omitempty"`
	DestinationDomainName  string     `protobuf:"bytes,15,opt,name=DestinationDomainName,proto3" json:"DestinationDomainName,omitempty"`
}

func (x *Flow) Reset() {
	*x = Flow{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[0]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Flow) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Flow) ProtoMessage() {}

func (x *Flow) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[0]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Flow.ProtoReflect.Descriptor instead.
func (*Flow) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{0}
}

func (x *Flow) GetSourceIPv4Address() []byte {
	if x != nil {
		return x.SourceIPv4Address
	}
	return nil
}

func (x *Flow) GetDestinationIPv4Address() []byte {
	if x != nil {
		return x.DestinationIPv4Address
	}
	return nil
}

func (x *Flow) GetSourcePort() uint32 {
	if x != nil {
		return x.SourcePort
	}
	return 0
}

func (x *Flow) GetDestinationPort() uint32 {
	if x != nil {
		return x.DestinationPort
	}
	return 0
}

func (x *Flow) GetProtocol() uint32 {
	if x != nil {
		return x.Protocol
	}
	return 0
}

func (x *Flow) GetFlowStartMilliseconds() uint64 {
	if x != nil {
		return x.FlowStartMilliseconds
	}
	return 0
}

func (x *Flow) GetFlowEndMilliseconds() uint64 {
	if x != nil {
		return x.FlowEndMilliseconds
	}
	return 0
}

func (x *Flow) GetFlowOctetCount() uint64 {
	if x != nil {
		return x.FlowOctetCount
	}
	return 0
}

func (x *Flow) GetFlowPacketCount() uint64 {
	if x != nil {
		return x.FlowPacketCount
	}
	return 0
}

func (x *Flow) GetReverseFlowOctetCount() uint64 {
	if x != nil {
		return x.ReverseFlowOctetCount
	}
	return 0
}

func (x *Flow) GetReverseFlowPacketCount() uint64 {
	if x != nil {
		return x.ReverseFlowPacketCount
	}
	return 0
}

func (x *Flow) GetSourceGeoIPData() *GeoIPData {
	if x != nil {
		return x.SourceGeoIPData
	}
	return nil
}

func (x *Flow) GetDestinationGeoIPData() *GeoIPData {
	if x != nil {
		return x.DestinationGeoIPData
	}
	return nil
}

func (x *Flow) GetSourceDomainName() string {
	if x != nil {
		return x.SourceDomainName
	}
	return ""
}

func (x *Flow) GetDestinationDomainName() string {
	if x != nil {
		return x.DestinationDomainName
	}
	return ""
}

type GeoIPData struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	CityName            string         `protobuf:"bytes,1,opt,name=CityName,proto3" json:"CityName,omitempty"`
	ContinentCode       string         `protobuf:"bytes,2,opt,name=ContinentCode,proto3" json:"ContinentCode,omitempty"`
	ContinentName       string         `protobuf:"bytes,3,opt,name=ContinentName,proto3" json:"ContinentName,omitempty"`
	CountryIsoCode      string         `protobuf:"bytes,4,opt,name=CountryIsoCode,proto3" json:"CountryIsoCode,omitempty"`
	CountryName         string         `protobuf:"bytes,5,opt,name=CountryName,proto3" json:"CountryName,omitempty"`
	CountryInEU         bool           `protobuf:"varint,6,opt,name=CountryInEU,proto3" json:"CountryInEU,omitempty"`
	Latitude            float64        `protobuf:"fixed64,7,opt,name=Latitude,proto3" json:"Latitude,omitempty"`
	Longitude           float64        `protobuf:"fixed64,8,opt,name=Longitude,proto3" json:"Longitude,omitempty"`
	MetroCode           uint32         `protobuf:"varint,9,opt,name=MetroCode,proto3" json:"MetroCode,omitempty"`
	TimeZone            string         `protobuf:"bytes,10,opt,name=TimeZone,proto3" json:"TimeZone,omitempty"`
	PostalCode          string         `protobuf:"bytes,11,opt,name=PostalCode,proto3" json:"PostalCode,omitempty"`
	Subdivisions        []*Subdivision `protobuf:"bytes,12,rep,name=Subdivisions,proto3" json:"Subdivisions,omitempty"`
	IsAnonymousProxy    bool           `protobuf:"varint,13,opt,name=IsAnonymousProxy,proto3" json:"IsAnonymousProxy,omitempty"`
	IsSatelliteProvider bool           `protobuf:"varint,14,opt,name=IsSatelliteProvider,proto3" json:"IsSatelliteProvider,omitempty"`
}

func (x *GeoIPData) Reset() {
	*x = GeoIPData{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[1]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *GeoIPData) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*GeoIPData) ProtoMessage() {}

func (x *GeoIPData) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[1]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use GeoIPData.ProtoReflect.Descriptor instead.
func (*GeoIPData) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{1}
}

func (x *GeoIPData) GetCityName() string {
	if x != nil {
		return x.CityName
	}
	return ""
}

func (x *GeoIPData) GetContinentCode() string {
	if x != nil {
		return x.ContinentCode
	}
	return ""
}

func (x *GeoIPData) GetContinentName() string {
	if x != nil {
		return x.ContinentName
	}
	return ""
}

func (x *GeoIPData) GetCountryIsoCode() string {
	if x != nil {
		return x.CountryIsoCode
	}
	return ""
}

func (x *GeoIPData) GetCountryName() string {
	if x != nil {
		return x.CountryName
	}
	return ""
}

func (x *GeoIPData) GetCountryInEU() bool {
	if x != nil {
		return x.CountryInEU
	}
	return false
}

func (x *GeoIPData) GetLatitude() float64 {
	if x != nil {
		return x.Latitude
	}
	return 0
}

func (x *GeoIPData) GetLongitude() float64 {
	if x != nil {
		return x.Longitude
	}
	return 0
}

func (x *GeoIPData) GetMetroCode() uint32 {
	if x != nil {
		return x.MetroCode
	}
	return 0
}

func (x *GeoIPData) GetTimeZone() string {
	if x != nil {
		return x.TimeZone
	}
	return ""
}

func (x *GeoIPData) GetPostalCode() string {
	if x != nil {
		return x.PostalCode
	}
	return ""
}

func (x *GeoIPData) GetSubdivisions() []*Subdivision {
	if x != nil {
		return x.Subdivisions
	}
	return nil
}

func (x *GeoIPData) GetIsAnonymousProxy() bool {
	if x != nil {
		return x.IsAnonymousProxy
	}
	return false
}

func (x *GeoIPData) GetIsSatelliteProvider() bool {
	if x != nil {
		return x.IsSatelliteProvider
	}
	return false
}

type Subdivision struct {
	state         protoimpl.MessageState
	sizeCache     protoimpl.SizeCache
	unknownFields protoimpl.UnknownFields

	IsoCode string `protobuf:"bytes,1,opt,name=IsoCode,proto3" json:"IsoCode,omitempty"`
	Name    string `protobuf:"bytes,2,opt,name=Name,proto3" json:"Name,omitempty"`
}

func (x *Subdivision) Reset() {
	*x = Subdivision{}
	if protoimpl.UnsafeEnabled {
		mi := &file_flow_proto_msgTypes[2]
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		ms.StoreMessageInfo(mi)
	}
}

func (x *Subdivision) String() string {
	return protoimpl.X.MessageStringOf(x)
}

func (*Subdivision) ProtoMessage() {}

func (x *Subdivision) ProtoReflect() protoreflect.Message {
	mi := &file_flow_proto_msgTypes[2]
	if protoimpl.UnsafeEnabled && x != nil {
		ms := protoimpl.X.MessageStateOf(protoimpl.Pointer(x))
		if ms.LoadMessageInfo() == nil {
			ms.StoreMessageInfo(mi)
		}
		return ms
	}
	return mi.MessageOf(x)
}

// Deprecated: Use Subdivision.ProtoReflect.Descriptor instead.
func (*Subdivision) Descriptor() ([]byte, []int) {
	return file_flow_proto_rawDescGZIP(), []int{2}
}

func (x *Subdivision) GetIsoCode() string {
	if x != nil {
		return x.IsoCode
	}
	return ""
}

func (x *Subdivision) GetName() string {
	if x != nil {
		return x.Name
	}
	return ""
}

var File_flow_proto protoreflect.FileDescriptor

var file_flow_proto_rawDesc = []byte{
	0x0a, 0x0a, 0x66, 0x6c, 0x6f, 0x77, 0x2e, 0x70, 0x72, 0x6f, 0x74, 0x6f, 0x12, 0x07, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x79, 0x73, 0x22, 0xe2, 0x05, 0x0a, 0x04, 0x46, 0x6c, 0x6f, 0x77, 0x12, 0x2c,
	0x0a, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72,
	0x65, 0x73, 0x73, 0x18, 0x01, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x11, 0x53, 0x6f, 0x75, 0x72, 0x63,
	0x65, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x12, 0x36, 0x0a, 0x16,
	0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x76, 0x34, 0x41,
	0x64, 0x64, 0x72, 0x65, 0x73, 0x73, 0x18, 0x02, 0x20, 0x01, 0x28, 0x0c, 0x52, 0x16, 0x44, 0x65,
	0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x49, 0x50, 0x76, 0x34, 0x41, 0x64, 0x64,
	0x72, 0x65, 0x73, 0x73, 0x12, 0x1e, 0x0a, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x50, 0x6f,
	0x72, 0x74, 0x18, 0x03, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0a, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65,
	0x50, 0x6f, 0x72, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x18, 0x04, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x0f, 0x44,
	0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x50, 0x6f, 0x72, 0x74, 0x12, 0x1a,
	0x0a, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x18, 0x05, 0x20, 0x01, 0x28, 0x0d,
	0x52, 0x08, 0x50, 0x72, 0x6f, 0x74, 0x6f, 0x63, 0x6f, 0x6c, 0x12, 0x34, 0x0a, 0x15, 0x46, 0x6c,
	0x6f, 0x77, 0x53, 0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f,
	0x6e, 0x64, 0x73, 0x18, 0x06, 0x20, 0x01, 0x28, 0x04, 0x52, 0x15, 0x46, 0x6c, 0x6f, 0x77, 0x53,
	0x74, 0x61, 0x72, 0x74, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73,
	0x12, 0x30, 0x0a, 0x13, 0x46, 0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69,
	0x73, 0x65, 0x63, 0x6f, 0x6e, 0x64, 0x73, 0x18, 0x07, 0x20, 0x01, 0x28, 0x04, 0x52, 0x13, 0x46,
	0x6c, 0x6f, 0x77, 0x45, 0x6e, 0x64, 0x4d, 0x69, 0x6c, 0x6c, 0x69, 0x73, 0x65, 0x63, 0x6f, 0x6e,
	0x64, 0x73, 0x12, 0x26, 0x0a, 0x0e, 0x46, 0x6c, 0x6f, 0x77, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x08, 0x20, 0x01, 0x28, 0x04, 0x52, 0x0e, 0x46, 0x6c, 0x6f, 0x77,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x28, 0x0a, 0x0f, 0x46, 0x6c,
	0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x09, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x0f, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x12, 0x34, 0x0a, 0x15, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46,
	0x6c, 0x6f, 0x77, 0x4f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0a, 0x20,
	0x01, 0x28, 0x04, 0x52, 0x15, 0x52, 0x65, 0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77,
	0x4f, 0x63, 0x74, 0x65, 0x74, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x12, 0x36, 0x0a, 0x16, 0x52, 0x65,
	0x76, 0x65, 0x72, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x18, 0x0b, 0x20, 0x01, 0x28, 0x04, 0x52, 0x16, 0x52, 0x65, 0x76, 0x65,
	0x72, 0x73, 0x65, 0x46, 0x6c, 0x6f, 0x77, 0x50, 0x61, 0x63, 0x6b, 0x65, 0x74, 0x43, 0x6f, 0x75,
	0x6e, 0x74, 0x12, 0x3c, 0x0a, 0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x6f, 0x49,
	0x50, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0c, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12, 0x2e, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x79, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x52,
	0x0f, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61,
	0x12, 0x46, 0x0a, 0x14, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x6f, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x18, 0x0d, 0x20, 0x01, 0x28, 0x0b, 0x32, 0x12,
	0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x79, 0x73, 0x2e, 0x47, 0x65, 0x6f, 0x49, 0x50, 0x44, 0x61,
	0x74, 0x61, 0x52, 0x14, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e, 0x47,
	0x65, 0x6f, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x12, 0x2a, 0x0a, 0x10, 0x53, 0x6f, 0x75, 0x72,
	0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0e, 0x20, 0x01,
	0x28, 0x09, 0x52, 0x10, 0x53, 0x6f, 0x75, 0x72, 0x63, 0x65, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x34, 0x0a, 0x15, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74,
	0x69, 0x6f, 0x6e, 0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x0f, 0x20,
	0x01, 0x28, 0x09, 0x52, 0x15, 0x44, 0x65, 0x73, 0x74, 0x69, 0x6e, 0x61, 0x74, 0x69, 0x6f, 0x6e,
	0x44, 0x6f, 0x6d, 0x61, 0x69, 0x6e, 0x4e, 0x61, 0x6d, 0x65, 0x22, 0x8b, 0x04, 0x0a, 0x09, 0x47,
	0x65, 0x6f, 0x49, 0x50, 0x44, 0x61, 0x74, 0x61, 0x12, 0x1a, 0x0a, 0x08, 0x43, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x43, 0x69, 0x74, 0x79,
	0x4e, 0x61, 0x6d, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e,
	0x74, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e,
	0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x24, 0x0a, 0x0d, 0x43, 0x6f,
	0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x03, 0x20, 0x01, 0x28,
	0x09, 0x52, 0x0d, 0x43, 0x6f, 0x6e, 0x74, 0x69, 0x6e, 0x65, 0x6e, 0x74, 0x4e, 0x61, 0x6d, 0x65,
	0x12, 0x26, 0x0a, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x04, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0e, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72,
	0x79, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f, 0x75, 0x6e,
	0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x05, 0x20, 0x01, 0x28, 0x09, 0x52, 0x0b, 0x43,
	0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x4e, 0x61, 0x6d, 0x65, 0x12, 0x20, 0x0a, 0x0b, 0x43, 0x6f,
	0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x45, 0x55, 0x18, 0x06, 0x20, 0x01, 0x28, 0x08, 0x52,
	0x0b, 0x43, 0x6f, 0x75, 0x6e, 0x74, 0x72, 0x79, 0x49, 0x6e, 0x45, 0x55, 0x12, 0x1a, 0x0a, 0x08,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x07, 0x20, 0x01, 0x28, 0x01, 0x52, 0x08,
	0x4c, 0x61, 0x74, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4c, 0x6f, 0x6e, 0x67,
	0x69, 0x74, 0x75, 0x64, 0x65, 0x18, 0x08, 0x20, 0x01, 0x28, 0x01, 0x52, 0x09, 0x4c, 0x6f, 0x6e,
	0x67, 0x69, 0x74, 0x75, 0x64, 0x65, 0x12, 0x1c, 0x0a, 0x09, 0x4d, 0x65, 0x74, 0x72, 0x6f, 0x43,
	0x6f, 0x64, 0x65, 0x18, 0x09, 0x20, 0x01, 0x28, 0x0d, 0x52, 0x09, 0x4d, 0x65, 0x74, 0x72, 0x6f,
	0x43, 0x6f, 0x64, 0x65, 0x12, 0x1a, 0x0a, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x18, 0x0a, 0x20, 0x01, 0x28, 0x09, 0x52, 0x08, 0x54, 0x69, 0x6d, 0x65, 0x5a, 0x6f, 0x6e, 0x65,
	0x12, 0x1e, 0x0a, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65, 0x18, 0x0b,
	0x20, 0x01, 0x28, 0x09, 0x52, 0x0a, 0x50, 0x6f, 0x73, 0x74, 0x61, 0x6c, 0x43, 0x6f, 0x64, 0x65,
	0x12, 0x38, 0x0a, 0x0c, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73,
	0x18, 0x0c, 0x20, 0x03, 0x28, 0x0b, 0x32, 0x14, 0x2e, 0x66, 0x6c, 0x6f, 0x77, 0x73, 0x79, 0x73,
	0x2e, 0x53, 0x75, 0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x52, 0x0c, 0x53, 0x75,
	0x62, 0x64, 0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x73, 0x12, 0x2a, 0x0a, 0x10, 0x49, 0x73,
	0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75, 0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x18, 0x0d,
	0x20, 0x01, 0x28, 0x08, 0x52, 0x10, 0x49, 0x73, 0x41, 0x6e, 0x6f, 0x6e, 0x79, 0x6d, 0x6f, 0x75,
	0x73, 0x50, 0x72, 0x6f, 0x78, 0x79, 0x12, 0x30, 0x0a, 0x13, 0x49, 0x73, 0x53, 0x61, 0x74, 0x65,
	0x6c, 0x6c, 0x69, 0x74, 0x65, 0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x18, 0x0e, 0x20,
	0x01, 0x28, 0x08, 0x52, 0x13, 0x49, 0x73, 0x53, 0x61, 0x74, 0x65, 0x6c, 0x6c, 0x69, 0x74, 0x65,
	0x50, 0x72, 0x6f, 0x76, 0x69, 0x64, 0x65, 0x72, 0x22, 0x3b, 0x0a, 0x0b, 0x53, 0x75, 0x62, 0x64,
	0x69, 0x76, 0x69, 0x73, 0x69, 0x6f, 0x6e, 0x12, 0x18, 0x0a, 0x07, 0x49, 0x73, 0x6f, 0x43, 0x6f,
	0x64, 0x65, 0x18, 0x01, 0x20, 0x01, 0x28, 0x09, 0x52, 0x07, 0x49, 0x73, 0x6f, 0x43, 0x6f, 0x64,
	0x65, 0x12, 0x12, 0x0a, 0x04, 0x4e, 0x61, 0x6d, 0x65, 0x18, 0x02, 0x20, 0x01, 0x28, 0x09, 0x52,
	0x04, 0x4e, 0x61, 0x6d, 0x65, 0x42, 0x25, 0x5a, 0x23, 0x67, 0x69, 0x74, 0x68, 0x75, 0x62, 0x2e,
	0x63, 0x6f, 0x6d, 0x2f, 0x73, 0x68, 0x65, 0x61, 0x63, 0x6c, 0x6f, 0x75, 0x64, 0x2f, 0x66, 0x6c,
	0x6f, 0x77, 0x73, 0x79, 0x73, 0x2f, 0x73, 0x63, 0x68, 0x65, 0x6d, 0x61, 0x62, 0x06, 0x70, 0x72,
	0x6f, 0x74, 0x6f, 0x33,
}

var (
	file_flow_proto_rawDescOnce sync.Once
	file_flow_proto_rawDescData = file_flow_proto_rawDesc
)

func file_flow_proto_rawDescGZIP() []byte {
	file_flow_proto_rawDescOnce.Do(func() {
		file_flow_proto_rawDescData = protoimpl.X.CompressGZIP(file_flow_proto_rawDescData)
	})
	return file_flow_proto_rawDescData
}

var file_flow_proto_msgTypes = make([]protoimpl.MessageInfo, 3)
var file_flow_proto_goTypes = []interface{}{
	(*Flow)(nil),        // 0: flowsys.Flow
	(*GeoIPData)(nil),   // 1: flowsys.GeoIPData
	(*Subdivision)(nil), // 2: flowsys.Subdivision
}
var file_flow_proto_depIdxs = []int32{
	1, // 0: flowsys.Flow.SourceGeoIPData:type_name -> flowsys.GeoIPData
	1, // 1: flowsys.Flow.DestinationGeoIPData:type_name -> flowsys.GeoIPData
	2, // 2: flowsys.GeoIPData.Subdivisions:type_name -> flowsys.Subdivision
	3, // [3:3] is the sub-list for method output_type
	3, // [3:3] is the sub-list for method input_type
	3, // [3:3] is the sub-list for extension type_name
	3, // [3:3] is the sub-list for extension extendee
	0, // [0:3] is the sub-list for field type_name
}

func init() { file_flow_proto_init() }
func file_flow_proto_init() {
	if File_flow_proto != nil {
		return
	}
	if !protoimpl.UnsafeEnabled {
		file_flow_proto_msgTypes[0].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Flow); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[1].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*GeoIPData); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
		file_flow_proto_msgTypes[2].Exporter = func(v interface{}, i int) interface{} {
			switch v := v.(*Subdivision); i {
			case 0:
				return &v.state
			case 1:
				return &v.sizeCache
			case 2:
				return &v.unknownFields
			default:
				return nil
			}
		}
	}
	type x struct{}
	out := protoimpl.TypeBuilder{
		File: protoimpl.DescBuilder{
			GoPackagePath: reflect.TypeOf(x{}).PkgPath(),
			RawDescriptor: file_flow_proto_rawDesc,
			NumEnums:      0,
			NumMessages:   3,
			NumExtensions: 0,
			NumServices:   0,
		},
		GoTypes:           file_flow_proto_goTypes,
		DependencyIndexes: file_flow_proto_depIdxs,
		MessageInfos:      file_flow_proto_msgTypes,
	}.Build()
	File_flow_proto = out.File
	file_flow_proto_rawDesc = nil
	file_flow_proto_goTypes = nil
	file_flow_proto_depIdxs = nil
}
